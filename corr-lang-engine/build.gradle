plugins {
    id 'antlr'
    id "application"
    id 'distribution'
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ['-package', 'io.corrlang.parser']
    outputDirectory = new File("src/generated/io/corrlang/parser")
}

dependencies {
    implementation project(':corr-lang-core')
    implementation 'org.antlr:antlr4-runtime:4.8'
    antlr "org.antlr:antlr4:4.8"
    testImplementation project(':mdegraphlib').sourceSets.test.output
}


application {
    mainClass.set("io.corrlang.engine.runner.ConsoleRun")
}

clean {
    delete 'src/generated'
}

run {
    args = []
}


compileJava.dependsOn generateGrammarSource

sourceSets {
    main {
        antlr.srcDirs 'src/main/antlr'
        java.srcDir 'src/main/java'
        java.srcDir 'src/generated'
        resources.srcDir 'src/main/resources'
    }
    test {
        java.srcDir 'src/test/java'
        resources.srcDir 'src/test/resources'
    }
}

test {
    filter {
        includeTestsMatching "io.corrlang.engine.CorrLangEngineSuite*"
    }
}

distributions {
    main {
        contents {
            into('plugins') {
                from("${buildDir}/plugins")
            }
            into('pluginDependencies') {
                from("${buildDir}/pluginDeps")
            }
        }
    }
}

startScripts {
    applicationName = "corrlang"
    classpath += files('../plugins')
    classpath += files('../pluginDependencies')
    // Apparently the gradle plugin is a bit "stupid" ...
    // https://discuss.gradle.org/t/classpath-in-application-plugin-is-building-always-relative-to-app-home-lib-directory/2012
    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replaceAll('%APP_HOME%\\\\lib\\\\plugins', '%APP_HOME%\\plugins\\*')
        windowsScriptFile.text = windowsScriptFile.text.replaceAll('%APP_HOME%\\\\lib\\\\pluginDependencies', '%APP_HOME%\\pluginDependencies\\*')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/plugins', '$APP_HOME/plugins/*')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/pluginDependencies', '$APP_HOME/pluginDependencies/*')
    }
}


