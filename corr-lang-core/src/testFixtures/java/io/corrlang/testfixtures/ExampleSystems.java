package io.corrlang.testfixtures;

import io.corrlang.domain.schemas.Schema;
import io.corrlang.domain.schemas.SchemaBuilder;
import no.hvl.past.attributes.BuiltinOperations;
import no.hvl.past.attributes.DataOperation;
import no.hvl.past.graph.Universe;
import no.hvl.past.graph.predicates.DataTypePredicate;
import no.hvl.past.names.Name;
import no.hvl.past.names.Value;
import no.hvl.past.util.Multiplicity;

public class ExampleSystems {

    private ExampleSystems() {
    }

    /**
     * Patients and observations.
     * Slightly inspired by FHIR.
     */
    public static void buildPatientsExample(SchemaBuilder builder) {
            builder.updateSymbolicName("Patients")
                    .stringValueType("String")
                    .intValueType("Long")
                    .floatValueType("Double")
                    .customValueType("DateTime", DataTypePredicate.getInstance())
                    .customValueType("URI", DataTypePredicate.getInstance())
                    .objectType("Observation")
                        .buildField("observationID", "Long")
                            .multiplicity(Multiplicity.of(1,1))
                            .endField()
                        .buildField("patient", "Patient")
                            .multiplicity(Multiplicity.of(1,1))
                            .endField()
                        .buildField("effectiveDateTime", "DateTime")
                            .multiplicity(Multiplicity.of(0,1 ))
                            .endField()
                        .buildField("coding", "CodeableConcept")
                            .multiplicity(Multiplicity.of(1, -1))
                            .makeContainment()
                            .endField()
                        .buildField("measurement", "Quantity")
                            .multiplicity(Multiplicity.of(1,1))
                            .makeContainment()
                            .endField()
                    .endObjectType()
                    .objectType("Patient")
                        .buildField("name", "String")
                            .multiplicity(Multiplicity.of(2, -1))
                            .endField()
                        .buildField("address", "Address")
                            .multiplicity(Multiplicity.of(0, 1))
                            .endField()
                        .buildField("patientId", "Long")
                            .multiplicity(Multiplicity.of(1,1))
                            .endField()
                    .endObjectType()
                    .objectType("Address")
                        .buildField("street", "String")
                            .multiplicity(Multiplicity.of(1,1))
                            .endField()
                        .buildField("city", "String")
                            .multiplicity(Multiplicity.of(1,1))
                            .endField()
                        .buildField("postalCode", "String")
                            .multiplicity(Multiplicity.of(1,1))
                            .endField()
                    .endObjectType()
                    .objectType("Quantity")
                        .buildField("value", "Double")
                            .multiplicity(Multiplicity.of(1,1))
                            .endField()
                        .buildField("unit", "CodeableConcept")
                            .multiplicity(Multiplicity.of(0,1))
                            .endField()
                    .endObjectType()
                    .objectType("CodeableConcept")
                        .buildField("codeSystem", "URI")
                            .multiplicity(Multiplicity.of(0,1))
                            .endField()
                        .buildField("code", "String")
                            .multiplicity(Multiplicity.of(1,1))
                            .endField()
                    .endObjectType()
                    .objectType("JournalSystem")
                        .buildField("patients", "Patient")
                            .makeContainment()
                            .endField()
                        .buildField("observations", "Observations")
                            .makeContainment()
                            .endField()
                    .endObjectType();

    }

    public enum Gender {
        MALE,
        FEMALE,
        NON_BINARY
    }


    public static void buildPersonsJobsAndCommunication(SchemaBuilder builder) {

        DataOperation greater18 = new DataOperation() {
            @Override
            public String name() {
                return "age >= 18";
            }

            @Override
            public int arity() {
                return 1;
            }

            @Override
            public Value applyImplementation(Value[] arguments) {
                Value[] left = new Value[2];
                left[0] = Name.value(18);
                left[1] = arguments[0];
                return BuiltinOperations.LessOrEqual.getInstance().apply(left);
            }

        };

        /**
         * Dummy model with Persons having jobs and addresses and such.
         */
        builder.updateSymbolicName("Persons")
                .stringValueType("String")
                .intValueType("Int")
                .enumValueType("Gender", Gender.class)
                .objectType("Job")
                    .buildField("position", "String")
                        .multiplicity(Multiplicity.of(1,1))
                        .endField()
                    .buildField("employer", "String")
                        .multiplicity(Multiplicity.of(1,1))
                        .endField()
                .endObjectType()
                .objectType("CommunicationChannel")
                .makeAbstract()
                .endObjectType()
                .objectType("PostalAddress")
                    .inheritsFrom("CommunicationChannel")
                    .buildField("street","String")
                        .multiplicity(Multiplicity.of(1,1))
                        .endField()
                    .buildField("city", "String")
                        .multiplicity(Multiplicity.of(1,1))
                        .endField()
                    .buildField("zip", "String")
                        .multiplicity(Multiplicity.of(1,1))
                        .endField()
                .endObjectType()
                .objectType("Email")
                    .inheritsFrom("CommunicationChannel")
                    .buildField("address", "String")
                        .multiplicity(Multiplicity.of(1,1))
                        .endField()
                .endObjectType()
                .objectType("Person")
                    .buildField("name", "String")
                        .multiplicity(Multiplicity.of(2,-1))
                        .endField()
                    .buildField("age", "Int")
                        .multiplicity(Multiplicity.of(1,1))
                        .constraint(greater18, "Person must be grown up")
                        .endField()
                    .buildField("gender", "Gender")
                        .multiplicity(Multiplicity.of(1,1))
                        .endField()
                    .buildField("worksAt", "Job")
                        .multiplicity(Multiplicity.of(0,1))
                        .endField()
                        .buildField("contactPoints", "CommunicationChannel")
                        .multiplicity(Multiplicity.of(1, -1))
                        .makeSymmetric("owner", "commChannels", Multiplicity.of(1,1),false,false)
                        .endField()
                .endObjectType()
                .objectType("Repository")
                .buildField("persons", "Person")
                    .makeContainment()
                    .endField()
                .buildField("channels", "CommunicationChannel")
                    .makeContainment()
                    .endField()
                .buildField("jobs", "Job")
                    .makeContainment()
                    .endField()
                .endObjectType()
                .action("all")
                .buildOutputArg(Name.identifier("result"), Name.identifier("Person")).endArgument()
                .end()
                .action("createPerson")
                .buildInputArg("name", "String")
                .multiplicity(Multiplicity.of(1,1))
                .endArgument()
                .buildInputArg("age","Int")
                .multiplicity(Multiplicity.of(1,1))
                .endArgument()
                .end();

    }

    public enum GradeScale {
        A,
        B,
        C,
        D,
        E,
        F
    }

    /**
     *
     * University schema as known from many database courses.
     */
    public static Schema buildUniversitySchema(SchemaBuilder builder) {
       return builder.updateSymbolicName("University")
                .floatValueType("Decimal")
                .intValueType("Int")
                .stringValueType("String")
                .enumValueType("Grade", GradeScale.class)
                .customValueType("Date", DataTypePredicate.getInstance())
                .objectType("Person")
                    .buildField("givenName", "String").multiplicity(Multiplicity.of(1, 1)).endField()
                    .buildField("familyName", "String").multiplicity(Multiplicity.of(1, 1)).endField()
                    .buildField("dateOfBirth", "Date").multiplicity(Multiplicity.of(1, 1)).endField()
                    .buildField("address", "String").multiplicity(Multiplicity.of(1, -1)).endField()
                .endObjectType()
                .objectType("Student")
                    .buildField("studentNo", "Int").multiplicity(Multiplicity.of(1, 1)).endField()
                    .buildField("programme", "String").multiplicity(Multiplicity.of(1, 3)).endField()
                    .buildField("person", "Person").multiplicity(Multiplicity.of(1, 1)).endField()
                    .buildField("enrolledSince", "Date").multiplicity(Multiplicity.of(1, 1)).endField()
                .endObjectType()
                .objectType("Teacher")
                    .buildField("salary", "Decimal").multiplicity(Multiplicity.of(1, 1)).endField()
                    .buildField("person", "Person").multiplicity(Multiplicity.of(1, 1)).endField()
                .endObjectType()
                .objectType("Course")
                    .buildField("courseCode", "String").multiplicity(Multiplicity.of(1, 1)).endField()
                    .buildField("title", "String").multiplicity(Multiplicity.of(0, 1)).endField()
                    .buildField("ects", "Int").multiplicity(Multiplicity.of(1, 1)).endField()
                    .buildField("dependsOn", "Course").setSemantics().endField()
                    .buildField("taughtBy", "Teacher").multiplicity(Multiplicity.of(1, -1)).endField()
                .endObjectType()
                .objectType("CourseSubscription")
                    .buildField("student", "Student")
                        .multiplicity(Multiplicity.of(1, 1))
                        .setSemantics()
                        .makeSymmetric("takes", "coursesTaken")
                    .endField()
                    .buildField("course", "Course").multiplicity(Multiplicity.of(1, 1)).endField()
                    .buildField("semester", "String").multiplicity(Multiplicity.of(1, 1)).endField()
                .endObjectType()
                .objectType("Examination")
                    .buildField("date", "Date").multiplicity(Multiplicity.of(1, 1)).endField()
                    .buildField("grade", "Grade").multiplicity(Multiplicity.of(1, 1)).endField()
                    .buildField("for", "CourseSubscription")
                        .multiplicity(Multiplicity.of(1, 1))
                        .makeSymmetric("exam", "courseExamination", Multiplicity.of(0, 3), true, false)
                .endField()
                .endObjectType()
                .objectType("University")
                    .buildField("students", "Student").makeContainment().endField()
                    .buildField("courses", "Course").makeContainment().endField()
                    .buildField("teachers", "Teacher").makeContainment().endField()
                .endObjectType()
                .build();
    }

    public static Schema buildSalesSystemSchema(SchemaBuilder builder) {
        builder.stringValueType("String");
        builder.stringValueType("ID");
        builder.intValueType("Int");
        builder.objectType("Customer")
                .buildField("id", "ID").multiplicity(Multiplicity.of(true, false)).endField()
                .buildField("name", "String").multiplicity(Multiplicity.of(false, false)).endField()
                .buildField("email", "String").multiplicity(Multiplicity.of(false, false)).endField()
                .buildField("address", "Address").multiplicity(Multiplicity.of(false, false)).endField()
                .buildField("purchases", "Purchase").multiplicity(Multiplicity.of(false, true)).endField()
                .endObjectType();
        builder.objectType("Address")
                .buildField("street", "String").multiplicity(Multiplicity.of(false, false)).endField()
                .buildField("city", "String").multiplicity(Multiplicity.of(false, false)).endField()
                .buildField("postalCode", "String").multiplicity(Multiplicity.of(false, false)).endField()
                .buildField("state", "String").multiplicity(Multiplicity.of(false, true)).listSemantics().endField()
                .buildField("country", "String").multiplicity(Multiplicity.of(false, true)).listSemantics().endField()
                .endObjectType();
        builder.objectType("Store")
                .buildField("id", "ID").multiplicity(Multiplicity.of(true, false)).endField()
                .buildField("manager", "ID").multiplicity(Multiplicity.of(true, false)).endField()
                .buildField("address", "Address").multiplicity(Multiplicity.of(false, false)).endField()
                .buildField("purchases", "Purchase").multiplicity(Multiplicity.of(false, true)).listSemantics().endField()
                .endObjectType();
        builder.objectType("Purchase")
                .buildField("id", "ID").multiplicity(Multiplicity.of(true, false)).endField()
                .buildField("date", "String").multiplicity(Multiplicity.of(false, false)).endField()
                .buildField("customer", "Customer").multiplicity(Multiplicity.of(true, false)).endField()
                .buildField("store", "Store").multiplicity(Multiplicity.of(true, true)).listSemantics().endField()
                .buildField("items", "PurchaseItem").multiplicity(Multiplicity.of(false, true)).listSemantics().endField()
                .endObjectType();
        builder.objectType("PurchaseItem")
                .buildField("productId", "ID").multiplicity(Multiplicity.of(true, false)).endField()
                .buildField("purchaseId", "ID").multiplicity(Multiplicity.of(true, false)).endField()
                .buildField("quantity", "Int").multiplicity(Multiplicity.of(false, false)).endField()
                .endObjectType();
        builder.actionGroup("Query")
                .action("customers")
                .buildReturnArg("Customer").multiplicity(Multiplicity.of(false, true)).listSemantics().endArgument()
                .endActionAndBackToGroup()
                .action("purchases")
                .buildReturnArg("Purchase").multiplicity(Multiplicity.of(false, true)).listSemantics().endArgument()
                .endActionAndBackToGroup()
                .action("stores")
                .buildReturnArg("Store").multiplicity(Multiplicity.of(false, true)).listSemantics().endArgument()
                .endActionAndBackToGroup()
                .action("customer")
                .buildInputArg("customer", "ID").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildReturnArg("Customer").multiplicity(Multiplicity.of(false, false)).endArgument()
                .endActionAndBackToGroup()
                .action("purchase")
                .buildInputArg("purchase", "ID").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildReturnArg("Purchase").multiplicity(Multiplicity.of(false, false)).endArgument()
                .endActionAndBackToGroup()
                .action("store")
                .buildInputArg("store", "ID").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildReturnArg("Store").multiplicity(Multiplicity.of(false, false)).endArgument()
                .endActionAndBackToGroup()
                .endCurrentGroup();
        builder.actionGroup("Mutation")
                .action("createCustomer")
                .buildInputArg("name", "String").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildInputArg("email", "String").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildReturnArg("Customer").multiplicity(Multiplicity.of(true, false)).endArgument()
                .endActionAndBackToGroup()
                .action("updateCustomer")
                .buildInputArg("customer", "ID").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildInputArg("name", "String").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildInputArg("email", "String").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildReturnArg("Customer").multiplicity(Multiplicity.of(false, false)).endArgument()
                .endActionAndBackToGroup()
                .action("setAddress")
                .buildInputArg("customer", "ID").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildInputArg("street", "String").multiplicity(Multiplicity.of(false, false)).endArgument()
                .buildInputArg("city", "String").multiplicity(Multiplicity.of(false, false)).endArgument()
                .buildInputArg("postalCode", "String").multiplicity(Multiplicity.of(false, false)).endArgument()
                .buildInputArg("state", "String").multiplicity(Multiplicity.of(false, false)).endArgument()
                .buildInputArg("country", "String").multiplicity(Multiplicity.of(false, false)).endArgument()
                .buildReturnArg("Customer").multiplicity(Multiplicity.of(false, false)).endArgument()
                .endActionAndBackToGroup()
                .action("deleteCustomer")
                .buildInputArg("customer", "ID").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildReturnArg("Customer").multiplicity(Multiplicity.of(false, false)).endArgument()
                .endActionAndBackToGroup()
                .action("createPurchase")
                .buildInputArg("customer", "ID").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildInputArg("date", "String").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildInputArg("store", "ID").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildReturnArg("Purchase").multiplicity(Multiplicity.of(false, false)).endArgument()
                .endActionAndBackToGroup()
                .action("addPurchaseItem")
                .buildInputArg("purchase", "ID").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildInputArg("product", "ID").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildInputArg("quantity", "Int").multiplicity(Multiplicity.of(false, false)).endArgument()
                .buildReturnArg("PurchaseItem").multiplicity(Multiplicity.of(false, false)).endArgument()
                .endActionAndBackToGroup()
                .action("deletePurchase")
                .buildInputArg("purchase", "ID").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildReturnArg("Purchase").multiplicity(Multiplicity.of(false, false)).endArgument()
                .endActionAndBackToGroup()
                .action("deleteStore")
                .buildInputArg("store", "ID").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildReturnArg("Store").multiplicity(Multiplicity.of(false, false)).endArgument()
                .endActionAndBackToGroup()
                .action("createStore")
                .buildInputArg("manager", "ID").multiplicity(Multiplicity.of(false, false)).endArgument()
                .buildInputArg("street", "String").multiplicity(Multiplicity.of(false, false)).endArgument()
                .buildInputArg("city", "String").multiplicity(Multiplicity.of(false, false)).endArgument()
                .buildInputArg("postalCode", "String").multiplicity(Multiplicity.of(false, false)).endArgument()
                .buildInputArg("state", "String").multiplicity(Multiplicity.of(false, false)).endArgument()
                .buildInputArg("country", "String").multiplicity(Multiplicity.of(false, false)).endArgument()
                .buildReturnArg("Store").multiplicity(Multiplicity.of(false, false)).endArgument()
                .endActionAndBackToGroup()
                .endCurrentGroup();

        return builder.build();
    }

    public Schema buildInvoicesSystemSchema(SchemaBuilder builder) {
        builder.stringValueType("String")
                .intValueType("Int")
                .customValueType("ID", DataTypePredicate.getInstance())
                .objectType("Address")
                .buildField("street", "String").multiplicityOptional().endField()
                .buildField("city", "String").multiplicityOptional().endField()
                .buildField("postalCode", "String").multiplicityOptional().endField()
                .buildField("state", "String").multiplicityOptional().endField()
                .buildField("country", "String").multiplicityOptional().endField()
                .endObjectType()
                .objectType("Client")
                .buildField("id", "ID").multiplicityRequired().endField()
                .buildField("name", "String").multiplicityOptional().endField()
                .buildField("paymentDetails", "PaymentDetails").multiplicityOptional().endField()
                .buildField("address", "Address").multiplicityOptional().endField()
                .buildField("invoices", "Invoice").multiplicityCollection().listSemantics().endField()
                .endObjectType()
                .objectType("Invoice")
                .buildField("id", "ID").multiplicity(Multiplicity.of(true)).endField()
                .buildField("client", "Client").multiplicityRequired().endField()
                .buildField("createdAt", "String").multiplicityOptional().endField()
                .buildField("dueAt", "String").multiplicityOptional().endField()
                .buildField("payedAt", "String").multiplicityOptional().endField()
                .buildField("total", "Int").multiplicityOptional().endField()
                .endObjectType()
                .objectType("PaymentDetails")
                .buildField("iban", "String").multiplicityOptional().endField()
                .buildField("bic", "String").multiplicityOptional().endField()
                .buildField("cardNumber", "String").multiplicityOptional().endField()
                .buildField("validUntil", "String").multiplicityOptional().endField()
                .endObjectType()
                .actionGroup("Mutation")
                .action("createClient")
                .buildInputArg("name", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildReturnArg(Name.identifier("Client")).multiplicity(Multiplicity.of(false)).endArgument()
                .endActionAndBackToGroup()
                .action("setAddress")
                .buildInputArg("client", "ID").multiplicity(Multiplicity.of(true)).endArgument()
                .buildInputArg("street", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("city", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("postalCode", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("state", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("country", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildReturnArg(Name.identifier("Client")).multiplicity(Multiplicity.of(false)).endArgument()
                .endActionAndBackToGroup()
                .action("setPaymentDetails")
                .buildInputArg("client", "ID").multiplicity(Multiplicity.of(true)).endArgument()
                .buildInputArg("iban", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("bic", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("cardNumber", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("validUntil", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildReturnArg(Name.identifier("Client")).multiplicity(Multiplicity.of(false)).endArgument()
                .endActionAndBackToGroup()
                .action("updateClient")
                .buildInputArg("client", "ID").multiplicity(Multiplicity.of(true)).endArgument()
                .buildInputArg("name", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildReturnArg(Name.identifier("Client")).multiplicity(Multiplicity.of(false)).endArgument()
                .endActionAndBackToGroup()
                .action("deleteClient")
                .buildInputArg("client", "ID").multiplicity(Multiplicity.of(true)).endArgument()
                .buildReturnArg(Name.identifier("Client")).multiplicity(Multiplicity.of(false)).endArgument()
                .endActionAndBackToGroup()
                .action("createInvoice")
                .buildInputArg("client", "ID").multiplicity(Multiplicity.of(true)).endArgument()
                .buildInputArg("createdAt", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("dueAt", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("payedAt", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("total", "Int").multiplicity(Multiplicity.of(false)).endArgument()
                .buildReturnArg(Name.identifier("Invoice")).multiplicity(Multiplicity.of(false)).endArgument()
                .endActionAndBackToGroup()
                .action("updateInvoice")
                .buildInputArg("invoice", "ID").multiplicity(Multiplicity.of(true)).endArgument()
                .buildInputArg("client", "ID").multiplicity(Multiplicity.of(true)).endArgument()
                .buildInputArg("createdAt", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("dueAt", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("payedAt", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("total", "Int").multiplicity(Multiplicity.of(false)).endArgument()
                .buildReturnArg(Name.identifier("Invoice")).multiplicity(Multiplicity.of(false)).endArgument()
                .endActionAndBackToGroup()
                .action("deleteInvoice")
                .buildInputArg("invoice", "ID").multiplicity(Multiplicity.of(true)).endArgument()
                .buildReturnArg(Name.identifier("Invoice")).multiplicity(Multiplicity.of(false)).endArgument()
                .endActionAndBackToGroup()
                .end()
                .actionGroup("Query")
                .action("clients")
                .buildReturnArg("Client").multiplicity(Multiplicity.of(false, true)).listSemantics().endArgument()
                .endActionAndBackToGroup()
                .action("client")
                .buildInputArg("client", "ID").multiplicity(Multiplicity.of(true)).endArgument()
                .buildReturnArg("Client").multiplicity(Multiplicity.of(false)).endArgument()
                .endActionAndBackToGroup()
                .action("invoice")
                .buildInputArg("invoice", "ID").multiplicity(Multiplicity.of(true)).endArgument()
                .buildReturnArg("Invoice").multiplicity(Multiplicity.of(false)).endArgument()
                .endActionAndBackToGroup()
                .action("invoices")
                .buildReturnArg("Invoice").multiplicity(Multiplicity.of(false, true)).listSemantics().endArgument()
                .endActionAndBackToGroup()
                .end();
        return builder.build();
    }

    public Schema buildHRSystemSchema(SchemaBuilder builder) {
        builder.stringValueType("String")
                .intValueType("Int")
                .customValueType("ID", DataTypePredicate.getInstance())
                .objectType("Department")
                .buildField("id", "ID").multiplicityRequired().endField()
                .buildField("name", "String").multiplicityOptional().endField()
                .buildField("manager", "Employee").multiplicityOptional().endField()
                .buildField("workingAt", "Employee").multiplicityCollection().listSemantics().endField()
                .endObjectType()
                .objectType("Employee")
                .buildField("id", "ID").multiplicityRequired().endField()
                .buildField("firstname", "String").multiplicityOptional().endField()
                .buildField("lastname", "String").multiplicityOptional().endField()
                .buildField("hiredAt", "String").multiplicityOptional().endField()
                .buildField("email", "String").multiplicityOptional().endField()
                .buildField("phone", "String").multiplicityOptional().endField()
                .buildField("worksAt", "Department").multiplicityOptional().endField()
                .buildField("bankAccount", "BankingDetails").multiplicityOptional().endField()
                .endObjectType()
                .objectType("BankingDetails")
                .buildField("iban", "String").multiplicityOptional().endField()
                .buildField("bic", "String").multiplicityOptional().endField()
                .endObjectType()
                .actionGroup("Mutation")
                .action("createEmployee")
                .buildInputArg("department", "ID").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("firstname", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("lastname", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("hiredAt", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("email", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("phone", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildReturnArg(Name.identifier("Employee")).multiplicity(Multiplicity.of(false)).endArgument()
                .endActionAndBackToGroup()
                .action("updateEmployee")
                .buildInputArg("employee", "ID").multiplicity(Multiplicity.of(true)).endArgument()
                .buildInputArg("department", "ID").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("firstname", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("lastname", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("hiredAt", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("email", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("phone", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildReturnArg(Name.identifier("Employee")).multiplicity(Multiplicity.of(false)).endArgument()
                .endActionAndBackToGroup()
                .action("setBankingDetails")
                .buildInputArg("employee", "ID").multiplicity(Multiplicity.of(true)).endArgument()
                .buildInputArg("iban", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("bic", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildReturnArg(Name.identifier("Employee")).multiplicity(Multiplicity.of(false)).endArgument()
                .endActionAndBackToGroup()
                .action("updateClient")
                .buildInputArg("client", "ID").multiplicity(Multiplicity.of(true)).endArgument()
                .buildInputArg("name", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildReturnArg(Name.identifier("Client")).multiplicity(Multiplicity.of(false)).endArgument()
                .endActionAndBackToGroup()
                .action("deleteEmployee")
                .buildInputArg("employee", "ID").multiplicity(Multiplicity.of(true)).endArgument()
                .buildReturnArg(Name.identifier("Client")).multiplicity(Multiplicity.of(false)).endArgument()
                .endActionAndBackToGroup()
                .action("createDepartment")
                .buildInputArg("name", "String").multiplicity(Multiplicity.of(false)).endArgument()
                .buildInputArg("manager", "ID").multiplicity(Multiplicity.of(false)).endArgument()
                .buildReturnArg(Name.identifier("Department")).multiplicity(Multiplicity.of(false)).endArgument()
                .endActionAndBackToGroup()
                .action("updateDepartment")
                .buildInputArg("department", "ID").multiplicity(Multiplicity.of(true)).endArgument()
                .buildInputArg("name", "String").multiplicity(Multiplicity.of(true)).endArgument()
                .buildInputArg("manager", "ID").multiplicity(Multiplicity.of(false)).endArgument()
                .buildReturnArg(Name.identifier("Department")).multiplicity(Multiplicity.of(false)).endArgument()
                .endActionAndBackToGroup()
                .action("deleteDepartment")
                .buildInputArg("department", "ID").multiplicity(Multiplicity.of(true)).endArgument()
                .buildReturnArg(Name.identifier("Department")).multiplicity(Multiplicity.of(false)).endArgument()
                .endActionAndBackToGroup()
                .end()
                .actionGroup("Query")
                .action("employees")
                .buildReturnArg("Employee").multiplicity(Multiplicity.of(false, true)).listSemantics().endArgument()
                .endActionAndBackToGroup()
                .action("employee")
                .buildInputArg("employee", "ID").multiplicity(Multiplicity.of(true)).endArgument()
                .buildReturnArg("Employee").multiplicity(Multiplicity.of(false)).endArgument()
                .endActionAndBackToGroup()
                .action("departments")
                .buildInputArg("department", "ID").multiplicity(Multiplicity.of(true)).endArgument()
                .buildReturnArg("Department").multiplicity(Multiplicity.of(false)).endArgument()
                .endActionAndBackToGroup()
                .action("department")
                .buildReturnArg("Department").multiplicity(Multiplicity.of(false, true)).listSemantics().endArgument()
                .endActionAndBackToGroup()
                .end();
        return builder.build();
    }


    public Schema buildPostsSchema(SchemaBuilder builder) {
        builder.stringValueType("String");
        builder.stringValueType("ID");
        builder.boolValueType("Boolean");
        builder.intValueType("Int");
        builder.floatValueType("Float");
        builder.objectType("Post")
                .buildField("id", "ID").multiplicity(Multiplicity.of(true, false)).endField()
                .buildField("title", "String").multiplicity(Multiplicity.of(true, false)).endField()
                .buildField("content", "String").multiplicity(Multiplicity.of(true, false)).endField()
                .buildField("author", "User").multiplicity(Multiplicity.of(true, false)).endField()
                .endObjectType();
        builder.objectType("User")
                .buildField("id", "ID").multiplicity(Multiplicity.of(true, false)).endField()
                .buildField("name", "String").multiplicity(Multiplicity.of(true, false)).endField()
                .buildField("email", "String").multiplicity(Multiplicity.of(true, false)).endField()
                .buildField("posts", "Post").multiplicity(Multiplicity.of(false, true)).listSemantics().endField()
                .endObjectType();
        builder.actionGroup("Query")
                .action("allPosts")
                .buildReturnArg("Post").multiplicity(Multiplicity.of(true, true)).listSemantics().endArgument()
                .endActionAndBackToGroup()
                .action("post")
                .buildInputArg("id", "ID").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildReturnArg("Post").multiplicity(Multiplicity.of(false, false)).endArgument()
                .endActionAndBackToGroup()
                .endCurrentGroup();
        builder.actionGroup("Mutation")
                .action("createPost")
                .buildInputArg("title", "String").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildInputArg("content", "String").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildInputArg("authorId", "ID").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildReturnArg("Post").multiplicity(Multiplicity.of(true, false)).endArgument()
                .endActionAndBackToGroup()
                .action("createUser")
                .buildInputArg("name", "String").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildInputArg("email", "String").multiplicity(Multiplicity.of(true, false)).endArgument()
                .buildReturnArg("User").multiplicity(Multiplicity.of(true, false)).endArgument()
                .endActionAndBackToGroup()
                .endCurrentGroup();

        return builder.build();
    }


    public Schema buildFamiliesExample(SchemaBuilder builder) {
        builder.stringValueType("String")
                .objectType("FamiliesRegister")
                .singleton()
                .buildField("families", "Family")
                .makeContainment()
                .multiplicity(Multiplicity.of(0, -1))
                .endField().endObjectType()
                .objectType("Family")
                    .buildField("name", "String").multiplicity(Multiplicity.of(1, 1)).endField()
                .buildField("father", "FamilyMember").multiplicity(Multiplicity.of(0, 1)).endField()
                .buildField("mother", "FamilyMember").multiplicity(Multiplicity.of(0, 1)).endField()
                .buildField("sons", "FamilyMember").multiplicity(Multiplicity.of(0, -1)).endField()
                .buildField("daughters", "FamilyMember").multiplicity(Multiplicity.of(0, -1)).endField()
                .endObjectType()
                .objectType("FamilyMember").field("name", "String")
                .endObjectType();
        return builder.build();

    }

}
