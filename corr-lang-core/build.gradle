import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

plugins {
    id 'antlr'
    id "application"
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ['-package', 'no.hvl.past.corrlang.parser']
    outputDirectory = new File("src/generated/no/hvl/past/corrlang/parser")
}

dependencies {
    implementation project(':mdegraphlib')
    implementation project(':mdegraphlib-gql')
    implementation project(':mdegraphlib-emf')
    implementation 'org.springframework:spring-context:5.3.3'
    compile 'org.antlr:antlr4-runtime:4.8'
    antlr "org.antlr:antlr4:4.8"
    implementation 'org.apache.logging.log4j:log4j-api:2.14.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.14.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j18-impl:2.14.0'
    testCompile project(':mdegraphlib').sourceSets.test.output
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'

}


ext {
    javaMainClass = "no.hvl.past.corrlang.runner.ConsoleRun"
}

application {
    mainClassName = javaMainClass
}




compileJava.dependsOn generateGrammarSource

sourceSets {
    main {
        antlr.srcDirs 'src/main/antlr'
        java.srcDir 'src/main/java'
        java.srcDir 'src/generated'
        resources.srcDir 'src/main/resources'
    }
    test {
        java.srcDir 'src/test/java'
        resources.srcDir 'src/test/resources'
    }
}

task updateVersionInfo {
    group = "corrlang"
    def isRelease = findProperty('release') ?: 'false'
    def gitBranch = "Unknown branch"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) {
        e.printStackTrace()
    }
    Properties props = new Properties()
    File propsFile = new File("${project.projectDir}/src/main/resources/BUILD.INFO")
    if (propsFile.exists()) {
        props.load(propsFile.newDataInputStream())
    }
    def buildNo = 1 + Integer.parseInt(props.getProperty("BUILD_NO", "0"))
    props.setProperty("BUILD_NO", buildNo.toString())
    props.setProperty("COMMIT",gitBranch)
    props.setProperty("BUILD_DATE", LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME))
    if (Boolean.parseBoolean(isRelease)) {
        props.setProperty("BUILD_TYPE", "RELEASE")
    } else {
        props.setProperty("BUILD_TYPE", "DEVELOPER")
    }
    props.store(propsFile.newDataOutputStream(),null)
}

task copyResult(type: Copy) {
    group = "corrlang"
    from("${project.projectDir}/build/libs") {
        include '**/*.jar'
    }
    into("${project.projectDir}/release")
}


shadowJar.mustRunAfter updateVersionInfo
copyResult.mustRunAfter shadowJar

task buildCorrlang {
    group = "corrlang"
    dependsOn(clean)
    dependsOn(updateVersionInfo)
    dependsOn(shadowJar)
    dependsOn(copyResult)
    doLast {
        File releaseDirectory = new File("${project.projectDir}/release")
        println("CorrLang successfully built: file://${releaseDirectory.getAbsolutePath()}/corrlang.jar ")
    }
}


clean {
    delete 'src/generated'
}

run {
    args = []
}

shadowJar {
    archiveBaseName.set('corrlang')
    archiveClassifier.set('')
    archiveVersion.set('')
}