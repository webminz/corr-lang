import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

plugins {
    id 'antlr'
    id "application"
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ['-package', 'no.hvl.past.corrlang.parser']
    outputDirectory = new File("src/generated/no/hvl/past/corrlang/parser")
}

dependencies {
    implementation project(':mdegraphlib')
    implementation project(':mdegraphlib-gql')
    implementation 'org.springframework:spring-context:5.3.3'
    compile 'org.antlr:antlr4-runtime:4.8'
    antlr "org.antlr:antlr4:4.8"
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.30'
    testCompile project(':mdegraphlib').sourceSets.test.output
}


ext {
    javaMainClass = "no.hvl.past.corrlang.runner.Run"
}

application {
    mainClassName = javaMainClass
}




compileJava.dependsOn generateGrammarSource

sourceSets {
    main {
        java.srcDir 'src/main/java'
        java.srcDir 'src/generated'
        resources.srcDir 'src/main/resources'
    }
    test {
        java.srcDir 'src/test/integration'
        java.srcDir 'src/test/java'
        resources.srcDir 'src/test/resources'
    }
}

task updateVersionInfo {
    def gitBranch = "Unknown branch"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) {
    }
    Properties props = new Properties()
    File propsFile = new File("${project.projectDir}/src/main/resources/BUILD.properties")
    props.load(propsFile.newDataInputStream())
    def version = props.get("VERSION")
    def buildNo = 1 + Integer.parseInt(props.getProperty("BUILD", "0"))
    props.setProperty("BUILD", buildNo.toString())
    props.setProperty("COMMIT",gitBranch)
    props.setProperty("DATE", LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME))
    props.store(propsFile.newDataOutputStream(),"")
}

clean {
    delete 'src/generated'
}

run {
    args = ["/Users/past/Desktop/Demo/def.corrlang", "\"GQLFile\""]
}

shadowJar {
    archiveBaseName.set('corrlang')
    archiveClassifier.set('')
    archiveVersion.set('')
}