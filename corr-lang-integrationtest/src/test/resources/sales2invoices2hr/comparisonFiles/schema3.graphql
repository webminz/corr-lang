type Query {
   client(client : ID!) : Partner
   clients : [Partner]
   customer(customer : ID!) : Partner
   customers : [Partner]
   department(department : ID!) : Department
   departments : [Department]
   employee(employee : ID!) : Partner
   employees : [Partner]
   invoice(invoice : ID!) : Invoice
   invoices : [Invoice]
   purchase(purchase : ID!) : Purchase
   purchases : [Purchase]
   store(store : ID!) : Store
   stores : [Store]
}

type Mutation {
   addPurchaseItem(purchase : ID!
      product : ID!
      quantity : Int) : PurchaseItem
   createClient(name : String) : Partner
   createCustomer(name : String!, email : String) : Partner!
   createDepartment(name : String, manager : ID) : Department
   createEmployee(department : ID
      firstname : String
      lastname : String
      hiredAt : String
      email : String
      phone : String) : Partner
   createInvoice(client : ID!
      createdAt : String
      dueAt : String
      payedAt : String
      total : Int) : Invoice
   createPurchase(customer : ID!
      date : String!
      store : ID!) : Purchase
   createStore(manager : ID
      street : String
      city : String
      postalCode : String
      state : String
      country : String) : Store
   deleteClient(client : ID!) : Partner
   deleteCustomer(customer : ID!) : Partner
   deleteDepartment(department : ID!) : Department
   deleteEmployee(employee : ID!) : Partner
   deleteInvoice(invoice : ID!) : Invoice
   deletePurchase(purchase : ID!) : Purchase
   deleteStore(store : ID!) : Store
   invoices_Mutation_setAddress(client : ID!
      street : String
      city : String
      postalCode : String
      state : String
      Country : String) : Partner
   sales_Mutation_setAddress(customer : ID!
      street : String
      city : String
      postalCode : String
      state : String
      country : String) : Partner
   setBankingDetails(employee : ID!
      iban : String
      bic : String) : Partner
   setPaymentDetails(client : ID!
      iban : String
      bic : String
      cardNumber : String
      validUntil : String) : Partner
   updateClient(client : ID!, name : String) : Partner
   updateCustomer(customer : ID!
      name : String
      email : String) : Partner
   updateDepartment(department : ID!
      name : String
      manager : ID) : Department
   updateEmployee(employee : ID!
      department : ID
      firstname : String
      lastname : String
      hiredAt : String
      email : String
      phone : String) : Partner
   updateInvoice(invoice : ID!
      client : ID!
      createdAt : String
      dueAt : String
      payedAt : String
      total : Int) : Invoice
}

type Address {
   city : String
   country : String
   postalCode : String
   state : String
   street : String
}

type BankingDetails {
   bic : String
   iban : String
}

type Department {
   id : ID!
   manager : Partner
   name : String
   workingAt : [Partner]
}

type Invoice {
   client : Partner!
   createdAt : String
   dueAt : String
   id : ID!
   payedAt : String
   total : Int
}

type Partner {
   address : Address
   bankAccount : BankingDetails
   email : String
   firstname : String
   hiredAt : String
   id : ID!
   invoices : [Invoice]
   lastname : String
   name : String
   paymentDetails : PaymentDetails
   phone : String
   purchases : [Purchase]
   worksAt : Department
}

type PaymentDetails {
   bic : String
   cardNumber : String
   iban : String
   validUntil : String
}

type Purchase {
   customer : Partner!
   date : String
   id : ID!
   items : [PurchaseItem]
   store : Store!
}

type PurchaseItem {
   productId : ID!
   purchaseId : ID!
   quantity : Int
}

type Store {
   address : Address
   id : ID!
   manager : ID!
   purchases : [Purchase]
}

